<?xml version="1.0"?>
<doc>
    <assembly>
        "Lumia.Sense (Phone)"
    </assembly>
    <members>
        <member name="M:Lumia.Sense.StepCounter.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.StepCounter.IsSupportedAsync">
            <summary>
Returns whether the sensor is supported by the device or not.
</summary>
            <returns>
                <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.StepCounter.DeactivateAsync">
            <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.StepCounter.ActivateAsync">
            <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="P:Lumia.Sense.StepCounter.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.StepCounter.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.StepCounter.GetStepCountAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the step count at given time.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When current time is used as timestamp reading from
<see cref="M:Lumia.Sense.StepCounter.GetCurrentReadingAsync" /> is returned. <see cref="T:Platform.COMException" /> with <see cref="F:Lumia.Sense.SenseError.InvalidParameter" /> is returned if data 
is requested from more than 10 days ago.
</remarks>
            <param name="timestamp">time to get the step count for</param>
            <returns>Step count at the given time. Returns <c>null</c> if no step count is available for the given time.</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.StepCounter" /> and fetch steps from two hours ago.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading steps = await stepCounter.GetStepCountAtAsync( DateTime.Now.AddHours( -2 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.StepCounter.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of step counts during given time period. Returns an empty vector if no history items are found.
</summary>
            <param name="startTime">start time</param>
            <param name="span">time span</param>
            <returns>Step count history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days. If you need to get the current reading, use <see cref="M:Lumia.Sense.StepCounter.GetCurrentReadingAsync" />.
<paragraph>If direct match is not available the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the step count at the start of the period before the first actual event within that period.</paragraph></remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.StepCounter" /> and fetch steps from past hour.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
IList&lt;StepCounterReading&gt; steps = await stepCounter.GetStepCountHistoryAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.StepCounter.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Gets the step count for given time range.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When requested range ends to current timestamp current reading is used to count
the steps.
</remarks>
            <param name="timestamp">start time</param>
            <param name="span">time span</param>
            <returns>Step count for the given range. Returns <c>null</c> if no step count is available for the given range.</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />,
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch one hour of steps starting from two hours ago.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCount steps = await stepCounter.GetStepCountForRangeAsync( DateTime.Now.AddHours( -2 ), TimeSpan.FromHours( 1 ) );
</code></example>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch current step count for today.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCount steps = await stepCounter.GetStepCountForRangeAsync( DateTime.Now.Date, DateTime.Now - DateTime.Now.Date );
</code></example>
        </member>
        <member name="M:Lumia.Sense.StepCounter.GetCurrentReadingAsync">
            <summary>
Gets the current walking and running step counts since the last Motion Data reset.
</summary>
            <returns>
The current reading of the sensor.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />. 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained currently.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.StepCounter" /> and fetch a current
number of steps.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading currentSteps = await stepCounter.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.StepCounter.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.StepCounter" />.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
</code></example>
        </member>
        <member name="T:Lumia.Sense.StepCounter">
            <summary>
Represents a step counter sensor.
</summary>
            <remarks>
This sensor returns the user's step count information.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.StepCounter" /> and fetch a current
number of steps.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading currentSteps = await stepCounter.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="M:HandleStandardErrors(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Handles standard errors received from Sense service. Will throw appropriate exceptions on
errors.
</summary>
            <remarks>This method will throw an exception whenever the status is not S_OK so be sure to
handle custom errors codes prior to calling this method if you don't want a generic error
exception to be thrown.
</remarks>
        </member>
        <member name="M:GetTimestamp">
            <summary>
Returns current timestamp
</summary>
            <returns>current timestamp</returns>
        </member>
        <member name="M:MapFromActivityClassToActivity(System.UInt64,Lumia.Sense.Activity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Maps native activity class to managed activity
</summary>
            <param name="activityClass">native activity class</param>
            <param name="activity">upon success the mapped activity</param>
        </member>
        <member name="M:LogTxtMessage(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Writes message to log file
</summary>
            <param name="format">format string</param>
        </member>
        <member name="D:ACTIVITY_CLASS">
@Copyright  Copyright (c) 2012-2013 Nokia Corporation and/or its subsidiary(-ies).
            All Rights reserved.
            This software, including documentation, is protected by copyright
            controlled by Nokia Corporation. All rights are reserved. Copying,
            including reproducing, storing, adapting or translating, any or all
            of this material requires the prior written consent of Nokia Corporation.
            This material also contains confidential information which may not be
            disclosed to others * without the prior written consent of Nokia.

@CONTACT    toni.kettula@nokia.com, juha.rakkola@nokia.com

@MODULENAME Module Name: NokiaActivityDetectionApiV2.h

@ABSTRACT   Abstract:
            API header for activity detection service. The API allows clients to
            subscribe to notifications about activity state changes.

@CLASS      File Class:
            sensitive

</member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetPlaceAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the place at given time.
</summary>
            <remarks>
This method is supported starting from API set 4.
<paragraph>
The available data extends only up to the last 10 days. The return value is <c>null</c> in case device 
was not in known place at the given time or data is requested from before the 10 days or from the future.
</paragraph></remarks>
            <param name="timestamp">Time to get the place for</param>
            <returns>Place at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and use 
it to get place visited an hour ago.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place place = await placeMonitor.GetPlaceAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetPlaceHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of places visited during given time period.
</summary>
            <param name="startTime">Start time</param>
            <param name="span">Time span</param>
            <returns>Place history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, <see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
This method is supported starting from API set 4.
<paragraph>
The available data extends only up to the last 10 days.
</paragraph></remarks>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and use 
it to get place history for the past hour.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
IList&lt;Place&gt; places = await placeMonitor.GetPlaceHistoryAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetKnownPlaceAsync(System.UInt32)">
            <summary>
Returns place matching the given place id. This method can be used to return any type of places: home, work, known and frequent.
</summary>
            <param name="id">Place id</param>
            <returns>
Queried Place.
</returns>
            <remarks>
The return value is <c>null</c> in case place is not available.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for place with id 12345.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place place = await placeMonitor.GetKnownPlaceAsync(12345);
</code></example>
        </member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetWorkAsync">
            <summary>
Gets the work location.
</summary>
            <returns>
The work place.
</returns>
            <remarks>
The return value is <c>null</c> in case work is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for work.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place work = await placeMonitor.GetWorkAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetHomeAsync">
            <summary>
Gets the home location.
</summary>
            <returns>
The home place.
</returns>
            <remarks>
The return value is <c>null</c> in case home is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for home.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place home = await placeMonitor.GetHomeAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.IPlaceMonitor.GetKnownPlacesAsync">
            <summary>
Gets the set of currently known places. This includes all types of places: home, work, known and frequent.
</summary>
            <returns>
The current list of known places.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for known places.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
IList&lt;Place&gt; knownPlaces = await placeMonitor.GetKnownPlacesAsync();
</code></example>
        </member>
        <member name="T:Lumia.Sense.IPlaceMonitor">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
frequently visited by the device.
</summary>
            <remarks>
This entity monitors several primitive sensor values, such as the device's geographic 
location, to identify a geographic location visited frequently. The most frequented
places are then classified using various heuristics into a kind of a place. The 
classification is best effort and should not be expected to yield full accuracy
in all styles of device usage. An application can and should implement a mapping
from this pre-defined classification of places into concepts and visuals releavant
in the application context.
</remarks>
            <example>
The following example shows how to get the PlaceMonitor and use 
it to get list of known places.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
var places = await placeMonitor.GetKnownPlacesAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Place.#ctor(Lumia.Sense.Place)">
            <summary>
Constructor
</summary>
            <param name="place">Place</param>
        </member>
        <member name="M:Lumia.Sense.Place.#ctor(System.UInt32,Lumia.Sense.PlaceKind,Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,System.UInt32)">
            <summary>
Constructor
</summary>
            <param name="id">Place id</param>
            <param name="kind">Place kind</param>
            <param name="position">Place location</param>
            <param name="radius">Place radius</param>
            <param name="timestamp">Last visit timestamp</param>
            <param name="lengthOfStay">Last visit length of stay</param>
            <param name="totalLengthOfStay">Total length of stay</param>
            <param name="totalVisitCount">Total visit count</param>
        </member>
        <member name="M:Lumia.Sense.Place.#ctor(System.UInt32,Lumia.Sense.PlaceKind,Windows.Devices.Geolocation.BasicGeoposition,System.Double)">
            <summary>
Constructor
</summary>
            <param name="id">Place id</param>
            <param name="kind">Place kind</param>
            <param name="position">Place location</param>
            <param name="radius">Place radius</param>
        </member>
        <member name="M:Lumia.Sense.Place.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.Place.TotalVisitCount">
            <summary>
Total number of times the device has visited this place.
</summary>
            <remarks>
This property is supported starting from API set 4.
</remarks>
        </member>
        <member name="P:Lumia.Sense.Place.TotalLengthOfStay">
            <summary>
Time how long the device stayed in this location in total.
</summary>
            <remarks>
This property is supported starting from API set 4.
</remarks>
        </member>
        <member name="P:Lumia.Sense.Place.LengthOfStay">
            <summary>Time how long the device stayed in this location during last visit.</summary>
            <remarks>
This property is supported starting from API set 4.
<paragraph>
The value is zero if the length could not be determined.
</paragraph></remarks>
        </member>
        <member name="P:Lumia.Sense.Place.Timestamp">
            <summary> The time when the place has beed entered.</summary>
            <remarks>This property is supported starting from API set 4.</remarks>
        </member>
        <member name="P:Lumia.Sense.Place.Radius">
            <summary>The radius of the circular area of the place centered at <see cref="P:Lumia.Sense.Place.Position" /> in meters.</summary>
            <remarks>The value is <c>NAN</c> if the radius could not be determined.</remarks>
        </member>
        <member name="P:Lumia.Sense.Place.Position">
            <summary>Geographic position of the place.</summary>
            <remarks>The Altitude field is <c>NAN</c> if the altitude could not be determined.</remarks>
        </member>
        <member name="P:Lumia.Sense.Place.Kind">
            <summary>Type or kind of the place.</summary>
        </member>
        <member name="P:Lumia.Sense.Place.Id">
            <summary>Unique identifier of the place.</summary>
        </member>
        <member name="T:Lumia.Sense.Place">
            <summary>
Contains information about a known place.
</summary>
        </member>
        <member name="T:Lumia.Sense.PlaceKind">
            <summary>
Indicates the type or kind of a place.
</summary>
        </member>
        <member name="F:Lumia.Sense.PlaceKind.Frequent">
            <summary>Frequently visited known place.</summary>
            <remarks>
This place type is supported starting from API set 2.
<paragraph>
Known place visited at least three times. Time between two consecutive visits at least 6 hours.
</paragraph></remarks>
        </member>
        <member name="F:Lumia.Sense.PlaceKind.Known">
            <summary>Other known place.</summary>
            <remarks>Any place where user stayed for at least 15 minutes.</remarks>
        </member>
        <member name="F:Lumia.Sense.PlaceKind.Work">
            <summary>Place of work.</summary>
        </member>
        <member name="F:Lumia.Sense.PlaceKind.Home">
            <summary>Home or home-like place.</summary>
        </member>
        <member name="M:Lumia.Sense.IStepCounter.GetStepCountAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the step count at given time.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When current time is used as timestamp reading from
<see cref="M:Lumia.Sense.IStepCounter.GetCurrentReadingAsync" /> is returned. <see cref="T:Platform.COMException" /> with <see cref="F:Lumia.Sense.SenseError.InvalidParameter" /> is returned if data 
is requested from more than 10 days ago.
</remarks>
            <param name="timestamp">time to get the step count for</param>
            <returns>Step count at the given time. Returns <c>null</c> if no step count is available for the given time.</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch steps from two hours ago.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading steps = await stepCounter.GetStepCountAtAsync( DateTime.Now.AddHours( -2 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IStepCounter.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of step counts during given time period.
</summary>
            <param name="startTime">start time</param>
            <param name="span">time span</param>
            <returns>Step count history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days. If you need to get the current reading, use <see cref="M:Lumia.Sense.IStepCounter.GetCurrentReadingAsync" />.
<paragraph>If direct match is not available the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the step count at the start of the period before the first actual event within that period.</paragraph></remarks>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch steps from past hour.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
IList&lt;StepCounterReading&gt; steps = await stepCounter.GetStepCountHistoryAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IStepCounter.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Gets the step count for given time range.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When requested range ends to current timestamp current reading is used to count the steps.
</remarks>
            <param name="timestamp">start time</param>
            <param name="span">time span</param>
            <returns>Step count for the given range. Returns <c>null</c> if no step count is available for the given range.</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />,
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch one hour of steps starting from two hours ago.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCount steps = await stepCounter.GetStepCountForRangeAsync( DateTime.Now.AddHours( -2 ), TimeSpan.FromHours( 1 ) );
</code></example>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch current step count for today.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCount steps = await stepCounter.GetStepCountForRangeAsync( DateTime.Now.Date, DateTime.Now - DateTime.Now.Date );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IStepCounter.GetCurrentReadingAsync">
            <summary>
Gets the current walking and running step counts since the last Motion Data reset.
</summary>
            <returns>
The current reading of the sensor.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained currently.
</remarks>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch a current
number of steps.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading currentSteps = await stepCounter.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="T:Lumia.Sense.IStepCounter">
            <summary>
Represents a step counter sensor.
</summary>
            <remarks>
This sensor returns the user's step count information.
</remarks>
            <example>
The following example shows how to get the <c>StepCounter</c> and fetch a current
number of steps.
<code lang="C#">
StepCounter stepCounter = await StepCounter.GetDefaultAsync();
StepCounterReading currentSteps = await stepCounter.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.StepCount.#ctor(System.UInt32,Windows.Foundation.TimeSpan,System.UInt32,Windows.Foundation.TimeSpan)">
            <summary>
Constructor
</summary>
            <param name="walkingStepCount">walking step count</param>
            <param name="walkTime">walk time</param>
            <param name="runningStepCount">running step count</param>
            <param name="runTime">run time</param>
        </member>
        <member name="M:Lumia.Sense.StepCount.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.StepCount.RunTime">
            <summary>
Gets the time spent running since the motion data was enabled.
</summary>
            <returns>total running duration</returns>
        </member>
        <member name="P:Lumia.Sense.StepCount.RunningStepCount">
            <summary>
Gets the number of running steps taken since the motion data was enabled.
</summary>
            <returns>running step count</returns>
        </member>
        <member name="P:Lumia.Sense.StepCount.WalkTime">
            <summary>
Gets the time spent walking since the motion data was enabled.
</summary>
            <returns>total walk duration</returns>
        </member>
        <member name="P:Lumia.Sense.StepCount.WalkingStepCount">
            <summary>
Gets the number of walking steps taken since the motion data was enabled.
</summary>
            <returns>walking step count</returns>
        </member>
        <member name="T:Lumia.Sense.StepCount">
            <summary>
Step count provides access to property values that tell current walking and running step counts and time spent walking and running. 
</summary>
        </member>
        <member name="M:Lumia.Sense.StepCounterReading.#ctor(System.UInt32,Windows.Foundation.TimeSpan,System.UInt32,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
            <summary>
Constructor
</summary>
            <param name="walkingStepCount">walking step count</param>
            <param name="walkTime">walk time</param>
            <param name="runningStepCount">running step count</param>
            <param name="runTime">run time</param>
            <param name="timestamp">timestamp</param>
        </member>
        <member name="M:Lumia.Sense.StepCounterReading.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.StepCounterReading.Timestamp">
            <summary>
Gets the creation time of the sensor reading.
</summary>
            <returns>timestamp</returns>
        </member>
        <member name="P:Lumia.Sense.StepCounterReading.RunTime">
            <summary>
Gets the time spent running since the motion data was enabled.
</summary>
            <returns>total running duration</returns>
        </member>
        <member name="P:Lumia.Sense.StepCounterReading.RunningStepCount">
            <summary>
Gets the number of running steps taken since the motion data was enabled.
</summary>
            <returns>running step count</returns>
        </member>
        <member name="P:Lumia.Sense.StepCounterReading.WalkTime">
            <summary>
Gets the time spent walking since the motion data was enabled.
</summary>
            <returns>total walk duration</returns>
        </member>
        <member name="P:Lumia.Sense.StepCounterReading.WalkingStepCount">
            <summary>
Gets the number of walking steps taken since the motion data was enabled.
</summary>
            <returns>walking step count</returns>
        </member>
        <member name="T:Lumia.Sense.StepCounterReading">
            <summary>
Represents a reading of the <c>StepCounter</c>.
</summary>
        </member>
        <member name="M:Lumia.Sense.ITrackPointMonitor.GetPointAtAsync(Windows.Foundation.DateTime)">
            <summary>
Returns a collected track point from the given time.
</summary>
            <param name="timestamp">Time stamp</param>
            <returns>Track point at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to last 10 days. The return value is <c>null</c> in case track point is not available for the given time
or data is requested from before the 10 days or from the future.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track
point from one hour ago.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
TrackPoint trackPoint = await trackPointMonitor.GetPointAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.ITrackPointMonitor.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns collected track points for the given time period.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available track data extends only up to last 10 days.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track point
history from one hour ago to now.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
IList&lt;TrackPoint&gt; trackPoints = await trackPointMonitor.GetTrackPointsAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="T:Lumia.Sense.ITrackPointMonitor">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
            <remarks>
Track points are collected passively, i.e. it won't actively track user's location with GPS,
accuracy of track points reflects the used positioning technology.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track
point from one hour ago.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
TrackPoint trackPoint = await trackPointMonitor.GetPointAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.TrackPoint.#ctor(Lumia.Sense.TrackPoint)">
            <summary>
Constructor
</summary>
            <param name="trackPoint">Track point</param>
        </member>
        <member name="M:Lumia.Sense.TrackPoint.#ctor(System.UInt32,Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
            <summary>
Overloaded Constructor
</summary>
            <param name="id">Place Id</param>
            <param name="position">Position</param>
            <param name="radius">Radius</param>
            <param name="lengthOfStay">Length of stay</param>
            <param name="timestamp">Time stamp</param>
        </member>
        <member name="M:Lumia.Sense.TrackPoint.#ctor(Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
            <summary>
Constructor
</summary>
            <param name="position">Position</param>
            <param name="radius">Radius</param>
            <param name="lengthOfStay">Length of stay</param>
            <param name="timestamp">Time stamp</param>
        </member>
        <member name="M:Lumia.Sense.TrackPoint.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.TrackPoint.Radius">
            <summary>The estimated radius of a circular area around the location  
which reflects the used positioning technology.</summary>
            <remarks>The value is NAN if the radius could not be determined.</remarks>
        </member>
        <member name="P:Lumia.Sense.TrackPoint.LengthOfStay">
            <summary>Time how long the device stayed at this point.</summary>
            <remarks>The value is zero if the length of stay in the location could not be
determined.</remarks>
        </member>
        <member name="P:Lumia.Sense.TrackPoint.Timestamp">
            <summary>Time of entry to the location.</summary>
        </member>
        <member name="P:Lumia.Sense.TrackPoint.Position">
            <summary>Geographic position of the track point.</summary>
            <remarks>The Altitude field is <c>NAN</c> if the altitude could not be determined.</remarks>
        </member>
        <member name="P:Lumia.Sense.TrackPoint.Id">
            <summary>Unique identifier of the place.</summary>
            <remarks>
This property is supported starting from API set 2.
<paragraph>
Zero if no place identifier available for the track point. Use <c>PlaceMonitor::GetKnownPlaceAsync()</c> to get details about the place. 
</paragraph></remarks>
        </member>
        <member name="T:Lumia.Sense.TrackPoint">
            <summary>
Represents a point within a route the device has been located in.
</summary>
        </member>
        <member name="D:Lumia.Sense.PlaceId">
            <summary>
Place id type definition.
</summary>
            <summary>
Place id type definition.
</summary>
        </member>
        <member name="M:Lumia.Sense.IActivityMonitor.GetActivityAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the device activity at given time.
</summary>
            <param name="timestamp">Time stamp</param>
            <returns>Activity at given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days. <see cref="T:Platform.COMException" /> with <see cref="F:Lumia.Sense.SenseError.InvalidParameter" /> is returned if data 
is requested from more than 10 days ago or from the future.
</remarks>
            <example>
The following example shows how to get the <c>ActivityMonitor</c> and use 
it to get activity from one hour ago.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading activity = await activityMonitor.GetActivityAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IActivityMonitor.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of activities occured during given time period.
</summary>
            <param name="periodFrom">Time period start</param>
            <param name="span">Time period length</param>
            <returns>Activity history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days.
<paragraph>The returned list includes all activity monitor readings within the given time pediod.
If available, the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the activity state of the device at the start of the period 
before the first actual activity event within that period.</paragraph></remarks>
            <example>
The following example shows how to get the <c>ActivityMonitor</c> and use 
it to get activity history from past 24 hours.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
IList&lt;ActivityMonitorReading&gt; activities = await activityMonitor.GetActivityHistoryAsync( DateTime.Now.AddDays( -1 ), TimeSpan.FromDays( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.IActivityMonitor.GetCurrentReadingAsync">
            <summary>
Gets the current activity
</summary>
            <returns>Current activity</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained.
</remarks>
            <example>
The following example shows how to get the <c>ActivityMonitor</c> and use 
it to get current activity.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading reading = await activityMonitor.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="P:Lumia.Sense.IActivityMonitor.Enabled">
            <summary>
Enables or disables activity change event monitoring.
</summary>
            <remarks>
                <see cref="E:Lumia.Sense.IActivityMonitor.ReadingChanged" /> events occur only while the property is set to <c>true</c>. However, sensor's 
current value can be queried via <see cref="M:Lumia.Sense.IActivityMonitor.GetCurrentReadingAsync" /> even when the property is <c>false</c>.
</remarks>
        </member>
        <member name="E:Lumia.Sense.IActivityMonitor.ReadingChanged">
            <summary>
Occurs each time activity changes.
</summary>
            <remarks>
An application may register a handler for this event to be notified of activity changes as 
an alternative to actively polling the values using <see cref="M:Lumia.Sense.IActivityMonitor.GetCurrentReadingAsync" />.
</remarks>
            <example>
The following example shows how to register for running and walking activity events.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
activityMonitor.Enabled = true;
activityMonitor.ReadingChanged += activityMonitor_ReadingChanged;
</code>
Here is the handler for activity change events.
<code lang="C#">
private void activityMonitor_ReadingChanged( IActivityMonitor source, ActivityMonitorReading value )
{
    // Handle activity change event here
}
</code></example>
        </member>
        <member name="T:Lumia.Sense.ActivityReadingChangedEventHandler">
            <summary>
Delegate type the <c>ReadingChanged</c> event handler of <c>ActivityMonitor</c>.
</summary>
            <param name="source">event source</param>
            <param name="value">activity reading</param>
        </member>
        <member name="T:Lumia.Sense.IActivityMonitor">

Forward declaration for Activity monitor

<summary>
Represents an activity state monitor sensor.
</summary><remarks>
This sensor returns the user's activity state values derived from
various sources of sensor and contextual information within the device.
</remarks><example>
The following example shows how to get the <c>ActivityMonitor</c> and use 
it to get current activity.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading reading = await activityMonitor.GetCurrentReadingAsync();
</code></example></member>
        <member name="M:Lumia.Sense.ActivityMonitorReading.#ctor(Lumia.Sense.Activity,Windows.Foundation.DateTime)">
            <summary>
Constructor
</summary>
            <param name="mode">Activity</param>
            <param name="timestamp">Time stamp</param>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitorReading.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.ActivityMonitorReading.Timestamp">
            <summary>
Gets the time at which the sensor reported the reading.
</summary>
            <remarks>As the activity mode is derived computationally from other
available information, the value does not correspond clearly to a concrete
event in the physical world. Instead, it reflects the point in time when 
the underlying algorithm determined that the activity mode changed.
</remarks>
        </member>
        <member name="P:Lumia.Sense.ActivityMonitorReading.Mode">
            <summary>
Gets the activity.
</summary>
        </member>
        <member name="T:Lumia.Sense.ActivityMonitorReading">
            <summary>
Supported device placements.
</summary>
            <remarks>
The device placement detection may be included as an additional
information with activity detection notifications.
</remarks>
            <summary>Represents a reading of the <c>ActivityMonitor</c>.</summary>
        </member>
        <member name="T:Lumia.Sense.Activity">
            <summary>
Enumeration representing different activity classes
</summary>
        </member>
        <member name="F:Lumia.Sense.Activity.MovingInVehicle">
            <summary>
Moving in vehicle
</summary>
            <remarks>
This activity class is supported starting from API set 3.
<paragraph>
In-vehicle activity recognition quality will be improved if both location is enabled in system settings and 
detailed data collection is enabled in Motion data settings. You can use SenseHelper.GetSettingsAsync() to query 
state of those settings.
</paragraph></remarks>
        </member>
        <member name="F:Lumia.Sense.Activity.Biking">
            <summary>
Biking
</summary>
            <remarks>
This activity class is supported starting from API set 3.
<paragraph>
Even if biking activity class is supported by the device, in order for it to get recognized both location must be 
enabled in system settings and detailed data collection must be enabled in Motion data settings. You can use
SenseHelper.GetSettingsAsync() to query state of those settings.
</paragraph></remarks>
        </member>
        <member name="F:Lumia.Sense.Activity.Running">
            <summary>
Running
</summary>
        </member>
        <member name="F:Lumia.Sense.Activity.Walking">
            <summary>
Walking
</summary>
        </member>
        <member name="F:Lumia.Sense.Activity.Stationary">
            <summary>
Stationary
</summary>
            <remarks>Device is on hand but user is not moving</remarks>
        </member>
        <member name="F:Lumia.Sense.Activity.Moving">
            <summary>
Moving
</summary>
        </member>
        <member name="F:Lumia.Sense.Activity.Idle">
            <summary>
Idle
</summary>
            <remarks>Device is laying still</remarks>
        </member>
        <member name="F:Lumia.Sense.Activity.Unknown">
            <summary>
Unknown
</summary>
            <remarks>Activity could not be determined (e.g. device is swithced off)</remarks>
        </member>
        <member name="F:Lumia.Sense.SenseHelper.m_supportedCapabilities">
            <summary>Cached supported capabilities</summary>
        </member>
        <member name="F:Lumia.Sense.SenseHelper.m_csHelper">
            <summary>Critical section to control access to helper functions</summary>
        </member>
        <member name="F:Lumia.Sense.SenseHelper.m_supportedSensorsCache">
            <summary>Cached list of supported sensors</summary>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.DeactivateSensorIgnoreErrors(Lumia.Sense.HidController,Lumia.Sense.HIDClientId)">
            <summary>
Deactivates sensor and ignores all exceptions
</summary>
            <param name="controller">Hid controller</param>
            <param name="id">Client id</param>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.DoGetApiVersion(Lumia.Sense.ApiVersionInfo)">
            <summary>
Returns Sense API version information
</summary>
            <param name="versionInfo">Upon success will contain version info</param>
            <returns>Return code</returns>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSupportedApiSet">
            <summary>
Returns the API set supported by the device
</summary>
            <returns>API set supported by the device</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSupportedCapabilities">
            <summary>
Returns the supported capabilities
</summary>
            <returns>Object containing capability details</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
This API has been deprecated. You should use <c>GetSupportedApiSetAsync</c> method to determine available features instead.
</remarks>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.IsSupportedAsync(Lumia.Sense.SensorType)">
            <summary>
Returns whether the given sensor is supported by the device or not.
</summary>
            <param name="type">Sensor type</param>
            <returns>
                <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.ValidateSensor(HIDMessage.SenseSensorType)">
            <summary>
Check to ensure that the sensor is supported and can be used (Motion data collection and location are enabled
if required by the sensor).
</summary>
            <param name="type">sensor type</param>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetApiVersionAsync">
            <summary>
Returns Sense API version information
</summary>
            <returns>Object containing Sense API version details</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSettingsAsync">
            <summary>
Returns Motion data settings
</summary>
            <returns>Motion data settings</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSupportedApiSetAsync">
            <summary>
Returns the API set supported by the device
</summary>
            <returns>API set supported by the device</returns>
            <remarks>
                <list type="table">
                    <listheader>
                        <term>API set</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>1</term>
                        <description>Baseline covering everything else not listed under the other API set levels.</description>
                    </item>
                    <item>
                        <term>2</term>
                        <description>
                            <list type="bullet">
                                <item>
                                    <c>PlaceMonitor.PlaceKind</c> has new value: <c>Frequent</c></item>
                                <item>
                                    <c>TrackPoint</c> has new property: <c>Id</c></item>
                                <item>Added triggers
          <list type="bullet"><item><c>StepCounterUpdate</c></item><item><c>MotionDataCleared</c>: This trigger will also be supported if supported API set is 1 but Motion data version is 2.</item><item><c>SenseApiStateChanged</c>: This trigger will also be supported if supported API set is 1 but Motion data version is 2.</item></list></item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>3</term>
                        <description>
                            <list type="bullet">
                                <item>New activity classes
          <list type="bullet"><item><c>Biking</c></item><item><c>MovingInVehicle</c></item></list></item>
                                <item>
                                    <c>DataCollectionQuality</c> can have value <c>Detailed</c> if set in Motion data 2.x settings</item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>4</term>
                        <description>
                            <list type="bullet">
                                <item>
                                    <c>PlaceMonitor.Place</c> has new properties
          <list type="bullet"><item><c>Timestamp</c></item><item><c>LengthOfStay</c></item><item><c>TotalLengthOfStay</c></item><item><c>TotalVisitCount</c></item></list></item>
                                <item>New methods available in <c>PlaceMonitor</c><list type="bullet"><item><c>GetPlaceHistoryAsync</c></item><item><c>GetPlaceAtAsync</c></item></list></item>
                            </list>
                        </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSupportedCapabilitiesAsync">
            <summary>
Returns the supported capabilities
</summary>
            <returns>Object containing capability details</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
This API has been deprecated. You should use <c>GetSupportedApiSetAsync</c> method to determine available features instead.
</remarks>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)">
            <summary>
Returns Sense error matching the given HResult code from an exception
</summary>
            <param name="hresult">HResult code received from exception thrown by Sense API</param>
            <returns>Sense error code</returns>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.LaunchLocationSettingsAsync">
            <summary>
Launches Location settings
</summary>
            <remarks>
An alternative way of doing this is to utilize the "ms-settings-location:" URI launch schema, i.e.
<code>await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings-location:"));</code></remarks>
            <returns>true if settings was launched, false otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.SenseHelper.LaunchSenseSettingsAsync">
            <summary>
Launches Sense settings
</summary>
            <remarks>
An alternative way of doing this is to utilize the "sensesettings:" URI launch schema, i.e.
<code>await Windows.System.Launcher.LaunchUriAsync(new Uri("sensesettings:"));</code></remarks>
            <returns>true if settings was launched, false otherwise</returns>
        </member>
        <member name="T:Lumia.Sense.SenseHelper">
            <summary>
Helper class providing miscellaneous Sense helper methods
</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.ServiceApiVersion">
            <summary>Sense service API version</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.GeoPlatformV3">
            <summary>
                <c>true</c> if the Geo platform version 3 features are supported, <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.ActivityClassInVehicle">
            <summary>
                <c>true</c> if device supports in-vehicle activity class, <c>false</c> otherwise.
</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.ActivityClassBicycle">
            <summary>
                <c>true</c> if device supports bicycle activity class, <c>false</c> otherwise.
</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.GeoPlatformV2">
            <summary>
                <c>true</c> if the Geo platform version 2 features are supported, <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.AltitudeMeterHistory">
            <summary>
                <c>true</c> if altitude meter supports history methods, <c>false</c> if it only supports current reading query.
</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.StepCounterDataInterval">
            <summary>Step counter data interval (in minutes)</summary>
            <remarks>Step counter data is recorded with the specified frequency.</remarks>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.ActivityTriggers">
            <summary>
                <c>true</c> if activity and inactivity triggers are supported, <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Lumia.Sense.ApiSupportedCapabilities.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.MotionDataSettingsTriggers">
            <summary>
                <c>true</c> if motion data settings triggers are supported, <c>false</c> otherwise.</summary>
            <remarks>
This API has been deprecated. You should use <c>GetSupportedApiSetAsync</c> method to determine available features instead.
<paragraph>
Triggers for motion data clearing and motion data and location state changes.
</paragraph></remarks>
        </member>
        <member name="P:Lumia.Sense.ApiSupportedCapabilities.StepCounterTrigger">
            <summary>
                <c>true</c> if step counter trigger is supported, <c>false</c> otherwise.
</summary>
            <remarks>
This API has been deprecated. You should use <c>GetSupportedApiSetAsync</c> method to determine available features instead.
</remarks>
        </member>
        <member name="T:Lumia.Sense.ApiSupportedCapabilities">
            <summary>
Supported capabilities info
</summary>
            <remarks>
This API has been deprecated. You should use <c>GetSupportedApiSetAsync</c> method to determine available features instead.
</remarks>
        </member>
        <member name="M:Lumia.Sense.ApiVersionInfo.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.ApiVersionInfo.#ctor(System.UInt32,System.String)">
            <summary>
Constructor
</summary>
            <param name="version">Service API version.</param>
            <param name="serviceVersion">Service version.</param>
        </member>
        <member name="P:Lumia.Sense.ApiVersionInfo.ServiceVersion">
            <summary>Service version.</summary>
        </member>
        <member name="P:Lumia.Sense.ApiVersionInfo.ServiceApiVersion">
            <summary>Service API version.</summary>
        </member>
        <member name="T:Lumia.Sense.ApiVersionInfo">
            <summary>
Sense API version info
</summary>
        </member>
        <member name="M:Lumia.Sense.MotionDataSettings.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.MotionDataSettings.DataQuality">
            <summary>
Data collection quality
</summary>
        </member>
        <member name="P:Lumia.Sense.MotionDataSettings.PlacesVisited">
            <summary>
                <c>true</c> if places visited is enabled in Motion data settings, <c>false</c> otherwise.
</summary>
        </member>
        <member name="P:Lumia.Sense.MotionDataSettings.LocationEnabled">
            <summary>
                <c>true</c> if location is enabled in system settings, <c>false</c> otherwise.
</summary>
        </member>
        <member name="P:Lumia.Sense.MotionDataSettings.Version">
            <summary>
Motion data settings application version
</summary>
            <remarks>
In version 1 of Motion data settings all sensors required that system location and Motion data settings were enabled.
In version 2 of Motion data settings Activity monitor and Step counter no longer require any settings to be enabled in order
to run while Place monitor and Track point monitor continue to work as before.
</remarks>
        </member>
        <member name="T:Lumia.Sense.MotionDataSettings">
            <summary>
Motion data settings
</summary>
        </member>
        <member name="T:Lumia.Sense.DataCollectionQuality">
            <summary>
Data collection quality settings
</summary>
        </member>
        <member name="F:Lumia.Sense.DataCollectionQuality.Detailed">
            <summary>Detailed data collection quality</summary>
            <remarks>
This setting is supported starting from API set 3.
</remarks>
        </member>
        <member name="F:Lumia.Sense.DataCollectionQuality.Basic">
            <summary>Basic data collection quality</summary>
        </member>
        <member name="M:Lumia.Sense.HidController.CreateBroker">
            <summary>
Create the HIdMessageBroker client instance, if its already created and valid this method does nothing. Note! Not thread safe!
</summary>
        </member>
        <member name="M:Lumia.Sense.HidController.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.HidController.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.HidController.DeactivateAsync(Lumia.Sense.HIDClientId)">
            <summary>
Close the communication with HID device, this explicitly closes the HidDevice handle
</summary>
            <param name="clientId">client id</param>
            <returns>asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.HidController.ActivateAsync(Lumia.Sense.HIDClientId)">
            <summary>
Initialize the communication with HID device
</summary>
            <param name="clientId">client id</param>
            <returns>asynchronous task</returns>
        </member>
        <member name="P:Lumia.Sense.HidController.Client">
            <summary>
Returns HID message broker client instance
</summary>
            <returns>HID message broker client instance</returns>
        </member>
        <member name="M:Lumia.Sense.HidController.GetDefaultAsync(Lumia.Sense.HIDClientId)">
            <summary>
Returns instance to the HID controller
</summary>
            <param name="clientId">client id</param>
            <returns>HID controller instance</returns>
        </member>
        <member name="T:Lumia.Sense.HidController">
            <summary>
Controller class that takes care of sending and receiving HID reports 
</summary>
            <remarks>
This is a singleton class.
</remarks>
        </member>
        <member name="T:Lumia.Sense.HIDClientId">
            <summary>
HID client ids
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesEnd">
            <summary>
End of client ids used by utility functions
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesGetSettings">
            <summary>
Settings getter
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesGetCapabilitiesInfo">
            <summary>
Capabilities info getter
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesIsSensorSupported">
            <summary>
Is sensor supported
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesValidateSensor">
            <summary>
Sensor validator
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesGetVersionInfo">
            <summary>
Version info getter
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesGetApiState">
            <summary>
API state getter
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.UtilitiesBegin">
            <summary>
Beginning of client ids used by utility functions
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.PlaceMonitor">
            <summary>
Place monitor
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.RouteTracker">
            <summary>
Route tracker
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.StepCounter">
            <summary>
Step counter
</summary>
        </member>
        <member name="F:Lumia.Sense.HIDClientId.ActivityMonitor">
            <summary>
Activity monitor
</summary>
        </member>
        <member name="T:HMBServiceClientHelper">
            <summary>This is the helper class to simplify the usage of broker API.</summary>
            <remarks>This file is embedded due to template usage.</remarks>
        </member>
        <member name="T:HMBService">
            <summary>Represents a well-known service.</summary>
        </member>
        <member name="T:Lumia.Sense.SenseError">
            <summary>
Sense error codes
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.IncompatibleSDK">
            <summary>
Incompatible SDK. Sense platform in the device is incompatible with the SDK version.
Please make sure to update to the latest SDK version.
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.SensorDeactivated">
            <summary>
Sensor is deactivated. You need to reactivate it by calling <c>ActivateAsync()</c></summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.SenseNotAvailable">
            <summary>
SensorCore SDK is not supported on this device
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.SensorNotAvailable">
            <summary>
Such sensor is not available on this device
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.Busy">
            <summary>
The component is busy, try again later
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.InvalidParameter">
            <summary>
Invalid input parameter(s)
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.LocationDisabled">
            <summary>
Location is disabled by the user from the Location settings
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.SenseDisabled">
            <summary>
User has disabled motion data collection from the Motion data settings
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.NotFound">
            <summary>
Item not found. There was no item matching the given criteria found.
</summary>
        </member>
        <member name="F:Lumia.Sense.SenseError.GeneralFailure">
            <summary>
General failure
</summary>
        </member>
        <member name="M:Lumia.Sense.SenseTrigger.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Lumia.Sense.SenseTrigger.SenseApiStateChanged">
            <summary>
Raised when "Places visited" in Motion data settings or system location setting has been switched on or off.
</summary>
            <remarks>
This trigger is supported starting from API set 2.
<paragraph>
In devices running with older version of Motion data settings, turning the "Motion data" setting on or off will also result in 
this trigger getting raised.
</paragraph><paragraph>
Note: This trigger will also be supported if supported API set is 1 but the Motion data version is 2.
</paragraph></remarks>
        </member>
        <member name="P:Lumia.Sense.SenseTrigger.MotionDataCleared">
            <summary>
Raised when motion data is cleared.
</summary>
            <remarks>
This trigger is supported starting from API set 2.
<paragraph>
Note: This trigger will also be supported if supported API set is 1 but the Motion data version is 2.
</paragraph></remarks>
        </member>
        <member name="P:Lumia.Sense.SenseTrigger.StepCounterUpdate">
            <summary>
Raised when user has moved at least 5 steps and at least 10 minutes have elapsed since last step counter trigger. Also raised at 
midnight in order for step counter applications to reset their daily statistics.
</summary>
            <remarks>
This trigger is supported starting from API set 2.
</remarks>
        </member>
        <member name="T:Lumia.Sense.SenseTrigger">
            <summary>
Sense device manufacturer triggers
</summary>
            <remarks>
These triggers are supported starting from API set 2.
</remarks>
        </member>
        <member name="M:Lumia.Sense.ISensor.DeactivateAsync">
            <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="M:Lumia.Sense.ISensor.ActivateAsync">
            <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="P:Lumia.Sense.ISensor.Type">
            <summary>
Gets the sensor type.
</summary>
            <returns>sensor type</returns>
        </member>
        <member name="T:Lumia.Sense.ISensor">
            <summary>
Base class for all SensorCore SDK sensors
</summary>
        </member>
        <member name="T:Lumia.Sense.SensorType">
            <summary>
Indicates the type of the sensor.
</summary>
        </member>
        <member name="F:Lumia.Sense.SensorType.TrackPointMonitor">
            <summary> Track point monitor </summary>
        </member>
        <member name="F:Lumia.Sense.SensorType.PlaceMonitor">
            <summary> Place monitor </summary>
        </member>
        <member name="F:Lumia.Sense.SensorType.StepCounter">
            <summary> Step counter </summary>
        </member>
        <member name="F:Lumia.Sense.SensorType.ActivityMonitor">
            <summary> Activity monitor </summary>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetRouteV3(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns the track point the device moved during the given time period. Supporting Geo v3 functions.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetRouteV2(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns the track point the device moved during the given time period. Supporting Geo v2 functions.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetRouteV1(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns the track points the device moved during the given time period. Original version.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.IsSupportedAsync">
            <summary>
Returns whether the sensor is supported by the device or not.
</summary>
            <returns>
                <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.DeactivateAsync">
            <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.ActivateAsync">
            <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="P:Lumia.Sense.TrackPointMonitor.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetPointAtAsync(Windows.Foundation.DateTime)">
            <summary>
Returns a collected track point from the given time.
</summary>
            <param name="timestamp">Time stamp</param>
            <returns>Track point at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to last 10 days. The return value is <c>null</c> in case track point is not available for the given time
or data is requested from before the 10 days or from the future.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track
point from one hour ago.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
TrackPoint trackPoint = await trackPointMonitor.GetPointAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns collected track points for the given time period.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available track data extends only up to last 10 days.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track point
history from one hour ago to now.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
IList&lt;TrackPoint&gt; trackPoints = await trackPointMonitor.GetTrackPointsAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.TrackPointMonitor.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.TrackPointMonitor" /><code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
</code></example>
        </member>
        <member name="T:Lumia.Sense.TrackPointMonitor">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
            <remarks>
Track points are collected passively, i.e. it won't actively track user's location with GPS,
accuracy of track points reflects the used positioning technology.
</remarks>
            <example>
The following example shows how to get the <c>TrackPointMonitor</c> and fetch a track
point from one hour ago.
<code lang="C#">
TrackPointMonitor trackPointMonitor = await TrackPointMonitor.GetDefaultAsync();
TrackPoint trackPoint = await trackPointMonitor.GetPointAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlacesV3">
            <summary>
Gets the set of currently known places with geo plaform v3.
</summary>
            <returns>
The current list of known places.
</returns>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlacesV1">
            <summary>
Gets the set of currently known places.
</summary>
            <returns>
The current list of known places.
</returns>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.IsSupportedAsync">
            <summary>
Returns whether the sensor is supported by the device or not.
</summary>
            <returns>
                <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.DeactivateAsync">
            <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.ActivateAsync">
            <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="P:Lumia.Sense.PlaceMonitor.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetPlaceAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the place at given time.
</summary>
            <remarks>
This method is supported starting from API set 4.
<paragraph>
The available data extends only up to the last 10 days. The return value is <c>null</c> in case device 
was not in known place at the given time or data is requested from before the 10 days or from the future.
</paragraph></remarks>
            <param name="timestamp">Time to get the place for</param>
            <returns>Place at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.PlaceMonitor" /> and use 
it to get place visited an hour ago.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place place = await placeMonitor.GetPlaceAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetPlaceHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of places visited during given time period.
</summary>
            <param name="startTime">Start time</param>
            <param name="span">Time span</param>
            <returns>Place history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, <see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
This method is supported starting from API set 4.
<paragraph>
The available data extends only up to the last 10 days.
</paragraph></remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.PlaceMonitor" /> and use 
it to get place history for the past hour.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
IList&lt;Place&gt; places = await placeMonitor.GetPlaceHistoryAsync( DateTime.Now.AddHours( -1 ), TimeSpan.FromHours( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlaceAsync(System.UInt32)">
            <summary>
Returns place matching the given place id. This method can be used to return any type of places: home, work, known and frequent.
</summary>
            <param name="id">Place id</param>
            <returns>
Queried Place.
</returns>
            <remarks>
The return value is <c>null</c> in case place is not available.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for place with id 12345.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place place = await placeMonitor.GetKnownPlaceAsync(12345);
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetWorkAsync">
            <summary>
Gets the work location.
</summary>
            <returns>
The work place.
</returns>
            <remarks>
The return value is <c>null</c> in case work is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for work.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place work = await placeMonitor.GetWorkAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetHomeAsync">
            <summary>
Gets the home location.
</summary>
            <returns>
The home place.
</returns>
            <remarks>
The return value is <c>null</c> in case home is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for home.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place home = await placeMonitor.GetHomeAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlacesAsync">
            <summary>
Gets the set of currently known places. This includes all types of places: home, work, known and frequent.
</summary>
            <returns>
The current list of known places.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.PlaceMonitor" /> and query 
for known places.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
IList&lt;Place&gt; knownPlaces = await placeMonitor.GetKnownPlacesAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.PlaceMonitor.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.PlaceMonitor" />.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
</code></example>
        </member>
        <member name="T:Lumia.Sense.PlaceMonitor">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
frequently visited by the device.
</summary>
            <remarks>
This entity monitors several primitive sensor values, such as the device's geographic 
location, to identify a geographic location visited frequently. The most frequented
places are then classified using various heuristics into a kind of a place. The 
classification is best effort and should not be expected to yield full accuracy
in all styles of device usage. An application can and should implement a mapping
from this pre-defined classification of places into concepts and visuals releavant
in the application context.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.PlaceMonitor" /> and use 
it to get list of known places.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
var places = await placeMonitor.GetKnownPlacesAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.PrepareActivityMonitorReading(HIDMessage.ActivityMonitorReading!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary>
Creates new activity monitor reading based on the given data
</summary>
            <param name="reading">activity monitor reading HID message</param>
            <param name="mask">activity class mask</param>
            <returns>Activity monitor reading populated with the given data</returns>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.OnNotificationReceived(System.Object,Lumia.Internal.HMBClient.HMBMessageEventArgs)">
            <summary>
Called when HID input report is received
</summary>
            <param name="sender">sender object</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.IsSupportedAsync">
            <summary>
Returns whether the sensor is supported by the device or not.
</summary>
            <returns>
                <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.DeactivateAsync">
            <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.ActivateAsync">
            <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="P:Lumia.Sense.ActivityMonitor.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.ActivityMonitor" />.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.GetActivityAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the device activity at given time.
</summary>
            <param name="timestamp">Time stamp</param>
            <returns>Activity at given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days. <see cref="T:Platform.COMException" /> with <see cref="F:Lumia.Sense.SenseError.InvalidParameter" /> is returned if data 
is requested from more than 10 days ago or from the future.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.ActivityMonitor" /> and use 
it to get activity from one hour ago.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading activity = await activityMonitor.GetActivityAtAsync( DateTime.Now.AddHours( -1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of activities occured during given time period.
</summary>
            <param name="periodFrom">Time period start</param>
            <param name="span">Time period length</param>
            <returns>Activity history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The available data extends only up to the last 10 days.
<paragraph>The returned list includes all activity monitor readings within the given time pediod.
If available, the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the activity state of the device at the start of the period 
before the first actual activity event within that period.</paragraph></remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.ActivityMonitor" /> and use 
it to get activity history from past 24 hours.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
IList&lt;ActivityMonitorReading&gt; activities = await activityMonitor.GetActivityHistoryAsync( DateTime.Now.AddDays( -1 ), TimeSpan.FromDays( 1 ) );
</code></example>
        </member>
        <member name="M:Lumia.Sense.ActivityMonitor.GetCurrentReadingAsync">
            <summary>
Gets the current activity
</summary>
            <returns>Current activity</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.ActivityMonitor" /> and use 
it to get current activity.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading reading = await activityMonitor.GetCurrentReadingAsync();
</code></example>
        </member>
        <member name="P:Lumia.Sense.ActivityMonitor.Enabled">
            <summary>
Enables or disables activity change event monitoring.
</summary>
            <remarks>
                <see cref="E:Lumia.Sense.ActivityMonitor.ReadingChanged" /> events occur only while the property is set to <c>true</c>. However, sensor's 
current value can be queried via <see cref="M:Lumia.Sense.ActivityMonitor.GetCurrentReadingAsync" /> even when the property is <c>false</c>.
</remarks>
        </member>
        <member name="E:Lumia.Sense.ActivityMonitor.ReadingChanged">
            <summary>
Occurs each time activity changes.
</summary>
            <remarks>
An application may register a handler for this event to be notified of activity changes as 
an alternative to actively polling the values using <see cref="M:Lumia.Sense.ActivityMonitor.GetCurrentReadingAsync" />.
</remarks>
            <example>
The following example shows how to register for running and walking activity events.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
activityMonitor.Enabled = true;
activityMonitor.ReadingChanged += activityMonitor_ReadingChanged;
</code>
Here is the handler for activity change events.
<code lang="C#">
private void activityMonitor_ReadingChanged( IActivityMonitor source, ActivityMonitorReading value )
{
    // Handle activity change event here
}
</code></example>
        </member>
        <member name="T:Lumia.Sense.ActivityMonitor">
            <summary>
Represents an activity state monitor sensor.
</summary>
            <remarks>
This sensor returns the user's activity state values derived from
various sources of sensor and contextual information within the device.
</remarks>
            <example>
The following example shows how to get the <see cref="T:Lumia.Sense.ActivityMonitor" /> and use 
it to get current activity.
<code lang="C#">
ActivityMonitor activityMonitor = await ActivityMonitor.GetDefaultAsync();
ActivityMonitorReading reading = await activityMonitor.GetCurrentReadingAsync();
</code></example>
        </member>
    </members>
</doc>